<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Junit on rapatao.com</title><link>https://www.rapatao.com/pt/tags/junit/</link><description>Recent content in Junit on rapatao.com</description><generator>Hugo</generator><language>pt</language><lastBuildDate>Wed, 19 Jan 2022 22:00:00 -0300</lastBuildDate><atom:link href="https://www.rapatao.com/pt/tags/junit/index.xml" rel="self" type="application/rss+xml"/><item><title>Construindo testes com Kotlin, JUnit e MockK</title><link>https://www.rapatao.com/pt/posts/2022-01/construindo-testes-com-kotlin-junit-mockk/</link><pubDate>Wed, 19 Jan 2022 22:00:00 -0300</pubDate><guid>https://www.rapatao.com/pt/posts/2022-01/construindo-testes-com-kotlin-junit-mockk/</guid><description>&lt;p>A constru√ß√£o de testes de c√≥digo em uma aplica√ß√£o tem como principal objetivo certificar o que foi codificado, ou seja, garantir que um determinado trecho de c√≥digo faz o que deveria fazer.&lt;/p>
&lt;p>&lt;a href="https://junit.org/junit5/">JUnit&lt;/a> √© um dos frameworks mais utilizados na constru√ß√£o de testes em &lt;a href="https://kotlinlang.org/">Kotlin&lt;/a> e &lt;a href="https://mockk.io/">MockK&lt;/a> para constru√ß√£o de &lt;em>mocks&lt;/em>, que seriam como dubl√™s de um objeto e tem como fun√ß√£o simular o comportamento de um componente.&lt;/p>
&lt;aside>
üí° Os c√≥digo utilizados nesse texto est√£o dispon√≠veis no GitHub: https://github.com/rapatao/blog-koltin-junit-mockk
&lt;/aside>
&lt;h2 id="depend√™ncias-utilizadas">Depend√™ncias utilizadas&lt;/h2>
&lt;p>√â importante dizer que, existem diversas formas de adicionar suporte a linguagem e frameworks que iremos utilizar neste texto. No exemplo abaixo, ser√° apresentado apenas uma delas, sendo basicamente como o &lt;em>&lt;a href="https://www.jetbrains.com/idea/">IntelliJ IDEA&lt;/a>&lt;/em> inicializa projetos em &lt;em>Kotlin&lt;/em> + &lt;em>&lt;a href="https://gradle.org/">Gradle&lt;/a>&lt;/em>.&lt;/p></description></item><item><title>Verifica√ß√£o de varargs utilizando Mockito</title><link>https://www.rapatao.com/pt/posts/2020-05/verify-varargs-using-mockito/</link><pubDate>Thu, 14 May 2020 00:00:00 -0300</pubDate><guid>https://www.rapatao.com/pt/posts/2020-05/verify-varargs-using-mockito/</guid><description>&lt;p>Construir testes √© uma das tarefas mais rotineiras de um desenvolvedor e normalmente, com frameworks como jUnit e Mockito, esta tarefa tende a ser realizada sem grandes dificuldades. Apesar disso, existem certas valida√ß√µes, que costumam ter maior complexidade, como exemplo, verifica√ß√£o de chamadas a m√©todos com par√¢metros to tipo &lt;em>varargs&lt;/em>.&lt;/p>
&lt;p>Caso n√£o saiba o que √© &lt;em>varargs&lt;/em>, pode-se dizer grosseiramente que √©, o &amp;ldquo;&amp;hellip;&amp;rdquo; utilizado nas declara√ß√µes de par√¢metros em m√©todos, por√©m, recomendo ler &lt;a href="https://www.geeksforgeeks.org/variable-arguments-varargs-in-java/">este artigo&lt;/a> para melhor entendimento e visualiza√ß√£o de exemplos.&lt;/p></description></item></channel></rss>