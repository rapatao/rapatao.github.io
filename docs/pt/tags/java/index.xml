<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on rapatao.com</title><link>https://www.rapatao.com/pt/tags/java/</link><description>Recent content in Java on rapatao.com</description><generator>Hugo</generator><language>pt</language><lastBuildDate>Thu, 24 Jun 2021 22:00:00 -0300</lastBuildDate><atom:link href="https://www.rapatao.com/pt/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Otimizando testes em aplicações com Spring Boot</title><link>https://www.rapatao.com/pt/posts/2021-06/otimizando-testes-em-aplicacoes-com-spring-boot/</link><pubDate>Thu, 24 Jun 2021 22:00:00 -0300</pubDate><guid>https://www.rapatao.com/pt/posts/2021-06/otimizando-testes-em-aplicacoes-com-spring-boot/</guid><description>&lt;p>É extremamente comum aplicações construídas com Spring Boot possuir todos seus testes anotados com &lt;code>@SpringBootTest&lt;/code>, porém é raro encontrar pessoas que sabem a funcionalidade dessa anotação, quando é necessária sua utilização e seu impacto na execução dos testes de uma aplicação.&lt;/p>
&lt;p>Você provavelmente deve ter pensado que essa anotação serve para a construção de testes, mas você sabe o que isso representa, o que acontece quando ela é utilizada?&lt;/p>
&lt;p>Simploriamente, essa anotação é uma forma simplificada de adicionar uma extensão ao &lt;a href="https://junit.org/junit5/docs/current/user-guide/#extensions">JUnit&lt;/a> que visa inicializar o contexto do Spring antes da execução dos cenários de testes declarados. Com sua utilização, antes de uma classe de teste ser executada, é realizado uma busca na aplicação pela classe anotada com &lt;code>@SpringBootApplication&lt;/code> para identificar possíveis customizações, carregado as configurações para o perfil de teste (quando não sobrescrito) e somente após o contexto ser inicializado, temos o método com o cenário executado.&lt;/p></description></item><item><title>Verificação de varargs utilizando Mockito</title><link>https://www.rapatao.com/pt/posts/2020-05/verify-varargs-using-mockito/</link><pubDate>Thu, 14 May 2020 00:00:00 -0300</pubDate><guid>https://www.rapatao.com/pt/posts/2020-05/verify-varargs-using-mockito/</guid><description>&lt;p>Construir testes é uma das tarefas mais rotineiras de um desenvolvedor e normalmente, com frameworks como jUnit e Mockito, esta tarefa tende a ser realizada sem grandes dificuldades. Apesar disso, existem certas validações, que costumam ter maior complexidade, como exemplo, verificação de chamadas a métodos com parâmetros to tipo &lt;em>varargs&lt;/em>.&lt;/p>
&lt;p>Caso não saiba o que é &lt;em>varargs&lt;/em>, pode-se dizer grosseiramente que é, o &amp;ldquo;&amp;hellip;&amp;rdquo; utilizado nas declarações de parâmetros em métodos, porém, recomendo ler &lt;a href="https://www.geeksforgeeks.org/variable-arguments-varargs-in-java/">este artigo&lt;/a> para melhor entendimento e visualização de exemplos.&lt;/p></description></item></channel></rss>