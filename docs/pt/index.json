[{"title":"GnuPG: como fazer backup e restaurar suas chaves?","date":"","description":"","body":"Recentemente precisei transferir minhas chaves privadas de um computador para outro e, acreditando que isso fosse algo rotineiro, decidi buscar na Internet os comandos necess√°rios para essa tarefa. Minha surpresa foi, que aparentemente, as pessoas somente exportam uma chave por vez, me dando a sensa√ß√£o de nunca precisarem exportar ou importar todas as chaves existentes.\nN√£o tenho muitas chaves cadastradas, mas n√£o queria executar a exporta√ß√£o/importa√ß√£o de uma chave por vez, queria algo que fizesse tudo de uma vez e a√≠, depois de um certo tempo pesquisando (provavelmente maior do que se tivesse feito uma a uma), cheguei aos comandos que tanto busquei.\nExportando suas chaves Utilizando o comando abaixo, ao inv√©s de gerar um arquivo por chave, ser√° gerado apenas um arquivo, contendo todas as suas chaves. Em casos onde existem diversas chaves para serem exportadas, isso pode facilitar muito o processo de migra√ß√£o, pois n√£o somente um comando √© necess√°rio para exportar todas as chaves de uma vez, como tamb√©m apenas um arquivo ser√° gerado contendo todas elas.\ngpg --export-options backup -o ~/keyring.gpg --export-secret-keys Durante o processo de exporta√ß√£o, caso suas chaves possuam senhas, elas dever√£o ser preenchidas durante o processo. Ap√≥s conclus√£o, um arquivo chamado keyring.gpg ser√° criado na $HOME do usu√°rio.\nImportando suas chaves O arquivo gerado no processo de exporta√ß√£o deve ser transferido para o computador destino e, para importa√ß√£o, o comando abaixo deve ser executado:\ngpg --import ~/keyring.gpg Assim como no processo de exporta√ß√£o, as senhas para as chaves dever√£o ser preenchidas.\nConclus√£o Ap√≥s o procedimento realizado, suas chaves estar√£o acess√≠veis e poder√£o ser consultadas normalmente utilizando o seguinte comando:\ngpg --list-secret-keys Acredito que possa existir melhores maneiras para realizar desse processo de migra√ß√£o, mas para muitos casos, esse processo simplificado pode ser √∫til, al√©m de realmente simples de se realizar.\nO arquivo gerado no processo de backup, como esperado, pode ser armazenado para usos futuros, mas recomendo ter aten√ß√£o e cuidado em onde ele ser√° armazenado. Lembre-se: suas chaves est√£o ali!\nRefer√™ncias: GPG Input and Output (Using the GNU Privacy Guard) ","ref":"/pt/posts/2022-07/gnupg-como-fazer-backup-e-restaurar-suas-chaves/"},{"title":"O que √© uma CDN (Content Delivery Network)?","date":"","description":"","body":"Uma rede de distribui√ß√£o de conte√∫do, do ingl√™s Content Delivery Network, pode ser descrita como um conjunto de servidores, distribu√≠dos globalmente, com finalidade de prover conte√∫do aos usu√°rios de maneira otimizada e no menor tempo poss√≠vel.\nComo os servidores da CDN est√£o distribu√≠dos em v√°rias localiza√ß√µes, alguns destes servidores tendem a estarem localizados mais pr√≥ximo ao usu√°rio destino que o servidor origem, o que faz com que a dist√¢ncia que os dados percorrerem (fisicamente), seja menor, consequentemente, entregues mais r√°pido.\nO que pode ser distribu√≠do e armazenado O principal objetivo √© armazenar conte√∫dos est√°ticos, ou seja, todo conte√∫do que uma vez gerado, n√£o sofre mais altera√ß√£o. Exemplos desse conte√∫do, quando falamos de um site, por exemplo, s√£o os arquivos HTML, CSS, imagens e JavaScript.\nApesar de exemplificado alguns arquivos acima, outros formatos podem ser distribu√≠dos sem grandes limita√ß√µes, como v√≠deos, PDF, TXT, etc.\nüí° √â importante dizer que alguns provedores, como a [AWS](https://aws.amazon.com/caching/cdn/), oferecem solu√ß√µes que permitem disponibilizar conte√∫dos dinamicamente gerados em sua CDN, por√©m, estes, normalmente n√£o ficam armazenados em seus servidores, apenas trafegados atrav√©s da rede \"interna\", funcionando como um intermediador (*proxy*) entre origem (servidor) e destino (usu√°rio). Distribui√ß√£o e replica√ß√£o do conte√∫do Devido √† natureza distribu√≠da de uma CDN, o conte√∫do a ser provido por ela precisa estar dispon√≠vel para todas as inst√¢ncias dessa rede e, basicamente, existem duas maneiras de realizar a distribui√ß√£o deste conte√∫do. Elas s√£o conhecidas como PULL e PUSH, onde as principais diferen√ßas entre elas est√° na maneira como os dados s√£o disponibilizados na CDN.\nModelo PULL Neste modelo, sempre que um conte√∫do for requisitado pelo usu√°rio, a CDN verifica se j√° possu√≠ o conte√∫do em seus servidores, caso n√£o, faz uma solicita√ß√£o ao servidor origem, armazena os dados em sua rede (cache) para ent√£o retornar ao usu√°rio os dados solicitados.\nExemplo de CDN (modelo PULL)\nA principal vantagem deste modelo est√° em sua baixa complexidade de implementa√ß√£o, pois n√£o √© necess√°rio disponibilizar o conte√∫do a ser provido pela CDN antes da primeira solicita√ß√£o do usu√°rio, pois ela se encarregar√° de recuperar este conte√∫do conforme necess√°rio, ou seja, conforme for sendo requisitado pelos usu√°rios. Em contrapartida, como o conte√∫do n√£o estar√° presente nos servidores da CDN durante as primeiras requisi√ß√µes, estas ter√£o um tempo maior de resposta, dado a necessidade de recupera√ß√£o destes conte√∫dos dos servidores de origem.\nModelo PUSH Diferente do modelo PULL, aqui o conte√∫do a ser disponibilizado precisa obrigatoriamente estar dispon√≠vel nos servidores da CDN antes de as requisi√ß√µes serem realizadas, ou seja, a CDN n√£o ser√° respons√°vel por recuperar o conte√∫do de uma origem, mas sim o desenvolvedor ou aplica√ß√£o deve armazenar estes conte√∫dos de maneira manual ou por processos automatizados.\nExemplo de CDN (modelo PUSH)\nNesse modelo, temos uma complexidade maior em sua implementa√ß√£o, pois, o conte√∫do precisa ser submetido aos servidores da CDN previamente, sejam por processos automatizados ou manuais. A automatiza√ß√£o destes processos pode ser bastante complexa e ser necess√°rio processos diferentes para cada aplica√ß√£o existente, o que pode fazer com que, a automatiza√ß√£o seja um processo extremamente complexo e custoso. Quando realizado de forma manual, falhas humanas podem ocorrer, como, por exemplo, esquecer de submeter algum conte√∫do importante, causando uma falha inesperada na execu√ß√£o da aplica√ß√£o.\nEm contrapartida, um dos maiores benef√≠cios obtidos nesse modelo √© a consist√™ncia da resposta, dado que a CDN nunca necessita recuperar dados de outro lugar que n√£o seus pr√≥prios servidores, o tempo de resposta tende a ser consistente e baixo.\nOutra vantagem neste modo, √© a capacidade de disponibilizar sistemas sem a necessidade de um servidor, utilizando somente a CDN. Por exemplo, √© poss√≠vel construir e disponibilizar um website que n√£o dependa de servi√ßos externos, apenas disponibilizando os arquivos HTML, CSS e JavaScript na CDN, sem nenhuma necessidade de servidores dedicados a eles.\nConclus√£o De maneira geral, apesar de agregar um certo n√≠vel de complexidade as aplica√ß√µes, seu uso √© normalmente v√°lido e recomend√°vel, pois, dado a proximidade dos servidores de um provedor de CDN com os usu√°rios de sua aplica√ß√£o, os dados solicitados por eles, s√£o normalmente entregues com tempo baixo, independentemente de sua localiza√ß√£o geogr√°fica, sem a necessidade de adicionar servidores de sua aplica√ß√£o ao redor do mundo, o que permite escalar sua aplica√ß√£o/servi√ßo sem necessariamente aumentar o custo operacional.\n√â importante dizer que o intu√≠do do texto foi descrever o que √© uma CDN e n√£o detalhar servi√ßos espec√≠ficos de provedores espec√≠ficos, como, por exemplo, a AWS, que permite disponibilizar conte√∫dos din√¢micos. Cada provedor tende a possuir caracter√≠sticas distintas, sejam disponibilizando funcionalidades novas, como disponibilidade geogr√°fica e, √© sempre recomend√°vel identific√°-las e validar a mais aderente as suas necessidades.\nFico por aqui, obrigado pela leitura, caso tenham d√∫vidas ou mesmo encontrem erros no texto, sinta-se a vontade de me contactar/avisar.\nRefer√™ncias What is a CDN? | How do CDNs work? What is CDN? | How Does a Content Delivery Network Work? AWS: Content Delivery Network (CDN) Caching Cloud CDN: Content Delivery Network¬†| Google Cloud ","ref":"/pt/posts/2022-04/o-que-e-uma-cdn-content-delivery-network/"},{"title":"Load Balancing: O que √© um balanceador de carga?","date":"","description":"","body":"Muito utilizado em aplica√ß√µes com alto volume de acesso simult√¢neo, um balanceador de carga (load balancer) √© um recurso computacional utilizado para realizar a distribui√ß√£o de carga entre dois ou mais servidores de uma aplica√ß√£o.\nNormalmente s√£o implementados com uso de m√°quinas dedicadas para esse trabalho, podendo elas serem f√≠sicas ou virtuais, ou por ‚Äúsoftwares‚Äù.\nBenef√≠cios Independente do modelo a ser implementado, eles visam distribuir o processamento de uma aplica√ß√£o entre as inst√¢ncias dispon√≠veis, onde se busca otimizar o uso de recursos computacionais, como rede, processamento (CPU), uso de mem√≥ria, entre outros.\nEssa distribui√ß√£o de recursos, reduz o risco com que as inst√¢ncias de uma aplica√ß√£o fiquem sobrecarregadas, consequentemente otimizando tempos de resposta em momentos de elevado n√∫mero de acessos simult√¢neos a aplica√ß√£o.\nOutro benef√≠cio que adv√©m da utiliza√ß√£o de balanceamento da carga √©, o incremento na disponibilidade (resili√™ncia), pois estes usam valida√ß√£o de sanidade das aplica√ß√µes, o que faz com que casos onde uma ou mais inst√¢ncias estejam indispon√≠veis, nenhum trafego seja encaminhado para elas, auxiliando assim para que o usu√°rio final n√£o perceba essa indisponibilidade.\nModelos de balanceamento Um balanceador de carga pode operar em duas camadas de rede do modelo OSI, na camada 4 (transporte) e na camada 7 (aplica√ß√£o). Balanceadores constru√≠dos na camada de transporte tendem a requerer menor poder de processamento para realiza√ß√£o da tarefa, contudo, possuem acesso a menos informa√ß√µes da requisi√ß√£o que implanta√ß√µes da camada de aplica√ß√£o. Apesar mais custosos, em rela√ß√£o √† necessidade de processamento, implanta√ß√µes na camada 7 tendem a trazer muitos benef√≠cios e com custos cada vez mais acess√≠veis, sua ado√ß√£o tem crescido muito nos √∫ltimos anos.\nüí° √â importante se atentar que existem casos em que um balanceador em camada de aplica√ß√£o n√£o se justificaria (custo x benef√≠cio), pois, as requisi√ß√µes a serem processadas nunca requerem controle que n√£o seja obtido com implanta√ß√µes em camada de transporte. Camada 4: Transporte Esse modelo de balanceamento trabalha na camada de transporte, ou seja, as decis√µes de roteamento s√£o baseadas em dados dispon√≠veis nela, ou seja, informa√ß√µes de protocolos, como TCP ou UDP, endere√ßamento IP destino e origem. Com base nessa informa√ß√£o √© realizado o encaminhamento do pacote atrav√©s de um recurso chamado NAT.\n√â importante se atentar que balanceamento nessa camada √© feito puramente com essas informa√ß√µes, ou seja, o conte√∫do do pacote n√£o √© interceptado e/ou analisado durante o encaminhamento, o que pode dificultar ou mesmo incapacitar a cria√ß√£o de regras que garantem que um mesmo usu√°rio tenha suas requisi√ß√µes sempre direcionadas para uma mesma inst√¢ncia de uma aplica√ß√£o, o que pode ser problem√°tico quando, por exemplo, h√° necessidade de controle de sess√£o do usu√°rio.\nCamada 7: Aplica√ß√£o Este modelo de balanceamento oferece maior quantidade de recursos para decis√µes de balanceamento e isso se deve ao fato de atuar na mais alta camada do modelo OSI. Por estar nessa camada, √© poss√≠vel analisar al√©m das informa√ß√µes existentes na camada 4, como tamb√©m outros relacionados a requisi√ß√£o recebida para decidir para qual inst√¢ncia ser√° encaminhada a requisi√ß√£o. Por exemplo, em um balanceamento de requisi√ß√µes HTTP, podemos verificar informa√ß√µes contidas no header para decidir o servidor destino, isso nos permite controlar a distribui√ß√£o no uso dos recursos, mas tamb√©m permite garantir outros controles, como, por exemplo, garantir que todas as requisi√ß√µes de um determinado usu√°rio sejam sempre processadas por mesma inst√¢ncia da aplica√ß√£o.\nEstrat√©gias de balanceamento O princ√≠pio de um balanceador de carga √© distribuir as requisi√ß√µes entre os servidores dispon√≠veis para processamento da requisi√ß√£o, por√©m, em praticamente todas as implementa√ß√µes, temos como definir como essas requisi√ß√µes ser√£o distribu√≠das entre as inst√¢ncias de nossa aplica√ß√£o. Essa decis√£o √© feita por algoritmos pr√© definidos, mas normalmente tamb√©m √© poss√≠vel criar regras customizadas.\nNeste texto descreverei dois dos algoritmos que acredito serem os mais utilizados, por√©m, diversos outros existem e √© sempre recomend√°vel avalia-los antes de eleger qual utilizar em sua aplica√ß√£o.\nRound Robin Esse algoritmo √© normalmente o padr√£o utilizado por muitas solu√ß√µes de balanceamento existentes no mercado. Nele, cada requisi√ß√£o √© encaminhada para uma inst√¢ncia diferente dentre as dispon√≠veis, seguindo uma ordem padronizada e continua.\nüí° Exemplo: Considerando 3 servidores destinos, a primeira requisi√ß√£o ser√° encaminhada para o primeiro servidor, a segunda para o segundo servidor e a terceira para o terceiro servidor. A partir da quarta requisi√ß√£o, a lista de servidores √© reiniciada, ou seja, ela seria encaminhada para o primeiro servidor, a pr√≥xima para o segundo e assim sucessivamente. Apesar de efetivo para a maioria dos casos, esse algoritmo pode causar sobrecarga em um dos servidores, pois ele n√£o considera as requisi√ß√µes pendentes para encaminhar ou n√£o uma requisi√ß√£o. Ou seja, ele pode ser problem√°tico para casos onde a maioria das requisi√ß√µes processadas pela aplica√ß√£o tiverem tempos muito diferentes entre elas e requererem uso intensivo de processamento para conclus√£o, o que faz com que um dos servidores possa ter mais requisi√ß√µes sendo processadas em determinado momento que outros, consequentemente, degradando o desempenho da aplica√ß√£o.\nLeast Connection Esse algoritmo faz o encaminhamento aos servidores utilizando um modelo simples de an√°lise, que consiste em verificar qual servidor dentre os dispon√≠veis t√™m menor quantidade de requisi√ß√µes no momento.\nüí° Exemplo: Considerando 3 servidores destinos, onde atualmente temos o primeiro com 5 conex√µes, o segundo com 3 e o terceiro com 4, nesse modelo, a pr√≥xima requisi√ß√£o seria encaminhada para o segundo servidor, por ser o que possu√≠ menor conex√µes ativas no momento e essa l√≥gica seria aplicada para todas as novas requisi√ß√µes. Ou seja, √© um modelo muito eficaz em rela√ß√£o √† distribui√ß√£o de carga e normalmente superior em desempenho, pois o servidor com menor quantidade de requisi√ß√µes ser√° sempre o eleito a receber uma pr√≥xima requisi√ß√£o. Contudo, ele ainda pode ser impactado com distribui√ß√£o de requisi√ß√µes, onde um servidor apesar de possuir menor quantidade de conex√µes, todas requerem elevado poder de processamento, degradando assim todas as requisi√ß√µes ativas neste servidor.\nSolu√ß√µes existentes No mercado existem diversos dispositivos e aplica√ß√µes com intuito de oferecer uma solu√ß√£o de balanceamento de cargas. Provedores de cloud, como Amazon AWS e Google Cloud, tamb√©m possuem solu√ß√µes nativas dispon√≠veis, o que pode facilitar sua implementa√ß√£o quando em uso destes provedores.\nNo mundo Open Source, existem diversas solu√ß√µes criadas para esse fim, cada uma com suas vantagens e desvantagens.\nSegue uma lista com as que acredito serem as principais solu√ß√µes atualmente e suas respectivas camadas de atua√ß√£o:\nHAProxy (camada 4 e 7) nginx (camada 4 e 7) Seesaw (camada 4) Traefik (camada 7) Conclus√£o Resumidamente, um balanceador de carga (load balancer) √© um recurso computacional, que pode ser um dispositivo ou uma aplica√ß√£o, respons√°vel por realizar a distribui√ß√£o do processamento entre as diversas inst√¢ncias de uma aplica√ß√£o atrav√©s estrat√©gias definidas.\nEle atua como um intermediador (proxy), recebendo e direcionando as requisi√ß√µes conforme regras definidas e visam, n√£o s√≥ aumentar a capacidade de processamento de da aplica√ß√£o como tamb√©m sua disponibilidade.\nEspero que este texto tenha ajudado a entender o que √© um balanceador de carga e alguns dos problemas que essa solu√ß√£o visa resolver. Por fim, deixo alguns links que me foram uteis durante a elabora√ß√£o deste texto.\nRefer√™ncias What Is Layer 4 Load Balancing? What is a Load Balancer? Load Balancing Definition Load balancing (computing) ","ref":"/pt/posts/2022-02/load-balancing-o-que-e-um-balanceador-de-carga/"},{"title":"Construindo testes com Kotlin, JUnit e MockK","date":"","description":"","body":"A constru√ß√£o de testes de c√≥digo em uma aplica√ß√£o tem como principal objetivo certificar o que foi codificado, ou seja, garantir que um determinado trecho de c√≥digo faz o que deveria fazer.\nJUnit √© um dos frameworks mais utilizados na constru√ß√£o de testes em Kotlin e MockK para constru√ß√£o de mocks, que seriam como dubl√™s de um objeto e tem como fun√ß√£o simular o comportamento de um componente.\nüí° Os c√≥digo utilizados nesse texto est√£o dispon√≠veis no GitHub: https://github.com/rapatao/blog-koltin-junit-mockk Depend√™ncias utilizadas √â importante dizer que, existem diversas formas de adicionar suporte a linguagem e frameworks que iremos utilizar neste texto. No exemplo abaixo, ser√° apresentado apenas uma delas, que √© basicamente como o IntelliJ IDEA inicializa projetos em Kotlin + Gradle.\nplugins { id \u0026#34;org.jetbrains.kotlin.jvm\u0026#34; version \u0026#34;1.6.10\u0026#34; } ... dependencies { implementation(\u0026#34;org.jetbrains.kotlin:kotlin-stdlib\u0026#34;) testImplementation(\u0026#34;org.junit.jupiter:junit-jupiter:5.8.2\u0026#34;) testImplementation(\u0026#34;io.mockk:mockk:1.12.2\u0026#34;) } ... test { useJUnitPlatform() } Antes de adicionar essas configura√ß√µes ao seu projeto, √© sempre importante verificar se as mesmas j√° n√£o est√£o presentes em seu projeto. Isso pode ser feito atrav√©s da task :dependencies, tanto atrav√©s de alguma IDE como por terminal, com o seguinte comando:\n$ gradle dependencies Com o resultado do comando, basta procurar pelas depend√™ncias, se as encontrar, sua configura√ß√£o est√° correta.\nO c√≥digo a ser testado Como a ideia principal √© demonstrar a constru√ß√£o de testes utilizando Kotlin, JUnit e MockK, o c√≥digo utilizado √© extremamente simples, por√©m atrav√©s dele ser√° poss√≠vel demonstrar n√£o s√≥ a cria√ß√£o de testes utilizando JUnit, como a constru√ß√£o de mocks atrav√©s de MockK, entre outros detalhes que iremos detalhar no decorrer do texto.\nCalculatorService.kt\nclass CalculatorService { fun sum(a: Int, b: Int) = a + b fun multi(a: Int, b: Int) = a * b } OpType.kt\nenum class OpType { SUM, MULTI } MainService.kt\nclass MainService( private val calculatorService: CalculatorService ) { fun execute(a: Int, b: Int, op: OpType) = when (op) { OpType.SUM -\u0026gt; calculatorService.sum(a, b) OpType.MULTI -\u0026gt; calculatorService.multi(a, b) } } O primeiro teste A declara√ß√£o de testes com JUnit √© feito atrav√©s da anota√ß√£o org.junit.jupiter.api.Testadicionada em uma fun√ß√£o que descreve o cen√°rio a ser executado, conforme exemplo:\nimport org.junit.jupiter.api.Test internal class ClassTest { @Test fun test() { // test block } } De maneira geral, todo teste verifica se algo ocorreu conforme esperado. Existem diversas formas se fazer isso, mas normalmente s√£o feitas atrav√©s dos m√©todos existentes na classe org.junit.jupiter.api.Assertions, como por exemplo, o assertEquals. Outros m√©todos existem, e podem ser verificados aqui.\nCom base no c√≥digo apresentado anteriormente, podemos criar alguns cen√°rios de testes, por√©m irei descrever apenas dois, que ir√£o basicamente realizar testes simples com as opera√ß√µes SUM e MULTI.\nimport org.junit.jupiter.api.Assertions.assertEquals import org.junit.jupiter.api.Test internal class SimpleTest { @Test fun `o resultado de 2+3 deve ser 5`() { val calculatorService = CalculatorService() val mainService = MainService(calculatorService) val result = mainService.execute(2, 3, OpType.SUM) assertEquals(5, result) } @Test fun `o resultado de 2*3 deve ser 6`() { val calculatorService = CalculatorService() val mainService = MainService(calculatorService) val result = mainService.execute(2, 3, OpType.MULTI) assertEquals(6, result) } } Apesar de simples, esses testes demonstram como √© realizado a constru√ß√£o de testes, que basicamente consiste em, criar as inst√¢ncias necess√°rias, invocar a fun√ß√£o a ser testada e comparado seu resultado.\nReduzindo c√≥digo duplicado nos testes Como pode ser notado, ambos cen√°rios realizam a constru√ß√£o de uma inst√¢ncia da classe a ser testada e, consequentemente de suas depend√™ncias. Com o JUnit, casos assim, poderiam ser constru√≠do declarando uma fun√ß√£o anota√ß√µes especificas, que s√£o executadas antes ou depois de um ou todos os cen√°rios de testes declarados.\nEssas anota√ß√µes s√£o utilizadas quando precisamos preparar ou remover dados antes ou depois da execu√ß√£o dos cen√°rios de testes, como por exemplo, realizar inser√ß√£o de dados em uma base de dados, ou apagar informa√ß√µes inseridas nesta mesma base.\nAs anota√ß√µes existentes e seus comportamentos s√£o descritos a seguir:\norg.junit.jupiter.api.BeforeAll: Executa antes de todos os cen√°rios de teste org.junit.jupiter.api.AfterEach: Executa antes de cada cen√°rio de teste org.junit.jupiter.api.AfterEach: Executa depois de cada cen√°rio de teste org.junit.jupiter.api.AfterAll: Executa depois de todos os cen√°rios de testes Conhecendo essas anota√ß√µes, podemos reescrever os cen√°rios anteriores da seguinte maneira:\nimport org.junit.jupiter.api.Assertions import org.junit.jupiter.api.BeforeEach import org.junit.jupiter.api.Test internal class WithBeforeTest { private lateinit var calculatorService: CalculatorService private lateinit var mainService: MainService @BeforeEach fun setup() { calculatorService = CalculatorService() mainService = MainService(calculatorService) } ... } Simulando chamadas em outras classes Muitos testes podem ser constru√≠dos com utiliza√ß√£o de depend√™ncias \u0026ldquo;reais\u0026rdquo;, ou seja, com suas inst√¢ncias, por√©m, alguns casos isso pode n√£o ser poss√≠vel, uma vez que essas inst√¢ncias podem necessitar ou acessar recursos que n√£o est√£o dispon√≠veis durante a execu√ß√£o dos testes.\nNesses casos, utilizamos ferramentas que criam mocks, que podem ser entendidos como inst√¢ncias que simulam o comportamento de uma inst√¢ncia real. Essa simula√ß√£o √© normalmente declarada explicitamente e seria algo como: \u0026ldquo;quando o m√©todo A for invocado com determinados par√¢metros, B dever√° ser retornado\u0026rdquo;.\nUtilizando nossas classes de exemplo, podemos escrever os testes da seguinte maneira:\nimport io.mockk.every import io.mockk.mockk import org.junit.jupiter.api.Assertions import org.junit.jupiter.api.BeforeEach import org.junit.jupiter.api.Test internal class WithBeforeTest { private lateinit var calculatorService: CalculatorService private lateinit var mainService: MainService @BeforeEach fun setup() { calculatorService = mockk() mainService = MainService(calculatorService) } @Test fun `o resultado de 2+3 deve ser 5`() { every { calculatorService.sum(any(), any()) } returns 5 val result = mainService.execute(2, 3, OpType.SUM) Assertions.assertEquals(5, result) } @Test fun `o resultado de 2*3 deve ser 6`() { every { calculatorService.multi(any(), any()) } returns 6 val result = mainService.execute(2, 3, OpType.MULTI) Assertions.assertEquals(6, result) } } Note que, agora antes de invocar o m√©todo execute, dizemos como o mock deve se comportar ao ser consumido. Apesar de n√£o tem muito sentido em nosso exemplo, considerado a simplicidade de nosso c√≥digo, isso pode ser extremamente √∫til quando precisamos simular o uso de um SDK terceiro que n√£o fornece meios para cria√ß√£o de testes, o que poderia impossibilitar a cria√ß√£o de testes, caso n√£o seja utilizado mocks.\nCriando mocks com anota√ß√µes O framework MockK, fornece um conjunto de anota√ß√µes que podem ser utilizadas para cria√ß√£o dos mocks e os injetar na classe a ser testada, sem que esse processo seja explicitamente realizado. Esse recurso √© √∫til quando necessitamos criar diversos mocks para constru√ß√£o dos testes e sua constru√ß√£o √© feita atrav√©s da adi√ß√£o de anota√ß√µes io.mockk.impl.annotations.MockK e io.mockk.impl.annotations.InjectMockKs nas vari√°veis declaradas na classe de teste.\nAp√≥s isso, devemos alterar no m√©todo setup para inicializar essas vari√°veis, como podemos ver seguir:\nimport io.mockk.MockKAnnotations import io.mockk.every import io.mockk.impl.annotations.InjectMockKs import io.mockk.impl.annotations.MockK import org.junit.jupiter.api.Assertions import org.junit.jupiter.api.BeforeEach import org.junit.jupiter.api.Test internal class WithMockKAnnotationTest { @MockK private lateinit var calculatorService: CalculatorService @InjectMockKs private lateinit var mainService: MainService @BeforeEach fun setup() { MockKAnnotations.init(this) } ... } Reduzindo c√≥digo na cria√ß√£o de mocks O JUnit oferece um recurso interessante que √© chamado de Extensions. Com esse recurso, podemos extender o comportamento do framework de testes, delegando diversos comportamentos que possa ser necess√°rio para a execu√ß√£o dos cen√°rios de testes.\nFrameworks populares como Spring, atrav√©s da @SpringBootTest e Micronaut, com @MicronautTestfazem uso desse recurso para inicializar o contexto antes da execu√ß√£o dos cen√°rios.\nO framework MockK tamb√©m oferece suporte a esse recurso, por√©m, n√£o utilizando uma anota√ß√£o especifica, mas sim, atrav√©s de uma declara√ß√£o explicita do recurso do JUnit, que consiste em adicionar a seguinte anota√ß√£o a classe dos testes:\n@org.junit.jupiter.api.extension.ExtendWith(MockKExtension::class) Com sua utiliza√ß√£o, n√£o precisamos mais, em nossa classe de teste, n√£o precisamos mais declara o m√©todo setup, deixando nossa classe de teste da seguinte maneira:\nimport io.mockk.every import io.mockk.impl.annotations.InjectMockKs import io.mockk.impl.annotations.MockK import io.mockk.junit5.MockKExtension import org.junit.jupiter.api.Assertions import org.junit.jupiter.api.Test import org.junit.jupiter.api.extension.ExtendWith @ExtendWith(MockKExtension::class) internal class WithMockKExtensionTest { @MockK private lateinit var calculatorService: CalculatorService @InjectMockKs private lateinit var mainService: MainService ... } Conclus√£o Nesse texto abordamos as depend√™ncias necess√°rias para constru√ß√£o de testes com Kotlin, utilizando as ferramentas JUnit e MockK. Descrevemos tamb√©m como construir m√©todos que s√£o executados antes e depois dos casos de testes, bem como a cria√ß√£o de mocks para casos onde n√£o podemos utilizar uma implementa√ß√£o real.\nEspero que tenha ajudado a compreender como construir testes utilizando essas ferramentas, bem como a otimizar sua constru√ß√£o, demonstrando como reduzir a quantidade de c√≥digo necess√°rio para constru√ß√£o dos casos de testes.\nAgrade√ßo a leitura e sinta-se a vontade em questionar sobre o assunto.\n","ref":"/pt/posts/2022-01/construindo-testes-com-kotlin-junit-mockk/"},{"title":"Otimizando testes em aplica√ß√µes com Spring Boot","date":"","description":"","body":"√â extremamente comum aplica√ß√µes constru√≠das com Spring Boot possuir todos seus testes anotados com @SpringBootTest, por√©m √© raro encontrar pessoas que sabem a funcionalidade dessa anota√ß√£o, quando √© necess√°ria sua utiliza√ß√£o e seu impacto na execu√ß√£o dos testes de uma aplica√ß√£o.\nVoc√™ provavelmente deve ter pensado que essa anota√ß√£o serve para a constru√ß√£o de testes, mas voc√™ sabe o que isso representa, o que acontece quando ela √© utilizada?\nSimploriamente, essa anota√ß√£o √© uma forma simplificada de adicionar uma extens√£o ao JUnit que visa inicializar o contexto do Spring antes da execu√ß√£o dos cen√°rios de testes declarados. Com sua utiliza√ß√£o, antes de uma classe de teste ser executada, √© realizado uma busca na aplica√ß√£o pela classe anotada com @SpringBootApplication para identificar poss√≠veis customiza√ß√µes, carregado as configura√ß√µes para o perfil de teste (quando n√£o sobrescrito) e somente ap√≥s o contexto ser inicializado, temos o m√©todo com o cen√°rio executado.\nCom isso em mente, √© interessante saber identificar os poss√≠veis impactos que sua utiliza√ß√£o pode trazer aos projetos.\nO impacto da anota√ß√£o @SpringBootTest Podemos considerar essa anota√ß√£o um facilitador para a cria√ß√£o de testes, por√©m, sua utiliza√ß√£o indiscriminada pode adicionar um tempo de execu√ß√£o consider√°vel, pois, conforme descrito anteriormente, diversas opera√ß√µes s√£o realizadas antes da execu√ß√£o dos testes.\nQuando uma aplica√ß√£o possui poucos cen√°rios de testes, normalmente esse tempo n√£o ser√° notado, mas conforme as aplica√ß√µes e complexidades das aplica√ß√µes crescem, diversos novos cen√°rios de testes tendem a serem inclu√≠dos, fazendo com que o tempo de execu√ß√£o seja cada vez mais impactante.\nPara se ter como refer√™ncia, foi criado uma aplica√ß√£o com apenas um componente chamado **que retornar√° um texto fixo ao ter o m√©todo consumido. Essa aplica√ß√£o pode ser resumida nas seguintes classes:\n@SpringBootApplication public class TempApplication { public static void main(String[] args) { SpringApplication.run(TempApplication.class, args); } } @Service public class TempService { public String get() { return \u0026#34;Nothing\u0026#34;; } } Normalmente, os testes para a classe TempService seria implementado da seguinte maneira:\n@SpringBootTest class TempApplicationTests { @Autowired private TempService service; @Test void test() { assertEquals(\u0026#34;Nothing\u0026#34;, service.get()); } } Como o uso da anota√ß√£o @SpringBootTest, temos o contexto do Spring inicializado em cada teste e esse cen√°rio simples √© executado em 233ms. Esse n√∫mero pode parecer pouco, mas estamos considerando apenas uma classe de teste com apenas um cen√°rio constru√≠do e devemos sempre lembrar que aplica√ß√µes reais tendem a possuir dezenas de classes com centenas de cen√°rios de testes, o que, teoricamente faria com que o tempo total de execu√ß√£o seja a multiplica√ß√£o dessa quantidade.\nComo podemos otimizar os testes? Como podemos notar, o teste anterior n√£o utiliza nenhum recurso do Spring, est√°vamos utilizando apenas para nos fornecer uma inst√¢ncia da classe TempService, algo que poder√≠amos tranquilamente resolver. Para esse caso em espec√≠fico, podemos simplesmente remover todas as anota√ß√µes do Spring e instanciar nossa classe manualmente, onde ter√≠amos a seguinte classe de teste:\nclass TempApplicationTests { private TempService service = new TempService(); @Test void test() { assertEquals(\u0026#34;Nothing\u0026#34;, service.get()); } } Com essa altera√ß√£o, conseguimos obter a mesma cobertura de teste, por√©m nosso teste √© conclu√≠do com apenas 15ms, o que representa um tempo de execu√ß√£o 15 vezes menor que quando utilizamos as anota√ß√µes.\nConclus√£o Como podemos notar, cen√°rios simples, onde apenas utilizamos o Spring para injetar nossos componentes, podemos facilmente substituir a utiliza√ß√£o das anota√ß√µes de teste por recursos nativos do Java. Com isso podemos reduzir drasticamente o tempo de execu√ß√£o de nossos testes e quando escalamos isso para aplica√ß√µes reais, com diversos cen√°rios, poderemos notar uma queda significativa no tempo total de execu√ß√£o dos testes.\nPor√©m, √© importante esclarecer que isso n√£o √© uma solu√ß√£o que deve ser aplicada para todos os casos, pois sua aplica√ß√£o pode e provavelmente deve possuir cen√°rios em que seria necess√°rio a utiliza√ß√£o do contexto para a constru√ß√£o e execu√ß√£o dos testes. Como exemplo para esses casos, podemos citar testes que visam identificar se todas as depend√™ncias para as nossas classes foram providas, testes de mapeamentos e requisi√ß√µes HTTP ou mesmo conex√µes com bancos de dados.\nEnfim, essa abordagem n√£o deve ser seguida para todos os casos, por√©m com certeza pode ser aplicada em diversos deles e consequentemente traria redu√ß√£o no tempo total de execu√ß√£o dos testes.\n","ref":"/pt/posts/2021-06/otimizando-testes-em-aplicacoes-com-spring-boot/"},{"title":"Pensando em GraalVM? Devo escolher Quarkus ou Micronaut?","date":"","description":"","body":"Recentemente no trabalho, pretend√≠amos utilizar GraalVM em uma nova aplica√ß√£o. Buscando solu√ß√µes compat√≠veis, vimos que Quarkus e Micronaut pareciam promissores e decidimos analisa-los.\nNota: Quando essa analise foi realizada, Spring possu√≠a um suporte muito limitado ao GraalVM e foi desconsiderado.\nDentre as op√ß√µes citadas, diversos benchmarks dispon√≠veis na Internet foram consultados, al√©m de verificado a compatibilidade com ferramentas e bibliotecas normalmente utilizadas nos projetos da empresa. Outros fatores foram analisados, como facilidade e qualidade da documenta√ß√£o e curva de aprendizado nessas tecnologias.\nCurva de aprendizado Apesar de muitas vezes ser desconsiderado em an√°lises por parte das pessoas de tecnologia, a complexidade em aprender e, de fato, entender o funcionamento de uma tecnologia afeta muito a qualidade e produtividade da equipe em um projeto. Considerando ainda que pretend√≠amos utilizar GraalVM, era extremamente prudente levar esse t√≥pico em considera√ß√£o, visto que n√£o seria apenas uma tecnologia \u0026ldquo;nova\u0026rdquo; a ser implementada no mesmo projeto.\nOs membros da equipe tamb√©m possu√≠am um bom conhecimento de Spring, sendo esse o que normalmente √© utilizado nos projetos desenvolvidos, seja utilizando o tradicional MVC ou o reativo WebFlux.\nDentre os projetos que normalmente desenvolvemos, raramente temos uma complexidade elevada, no sentido de integra√ß√£o ao framework, sendo que normalmente apenas disponibilizamos uma API Rest que, pode consumir outras APIs e um ou mais bases de dados, ou seja, nossa complexidade tende a estar nas regras de neg√≥cio.\nTendo em mente os pontos citados, tanto Quarkus, como o Micronaut possuem diversas similaridades com o Spring, e facilitariam muitos dos nossos casos de usos, por√©m a forma como tudo √© declarado no Micronaut (beans, configurations, etc) pareceu ser bem mais semelhante com o Spring, o que poderia auxiliar no processo de assimila√ß√£o da ferramenta.\nOutro ponto que tamb√©m trouxe certa facilidade com o Micronaut, foi o suporte que este possu√≠ a declara√ß√£o de queries de forma declarativa, semelhante √† forma como ao dispon√≠vel no Spring Data ou no GORM do Grails.\nDurante essa analise, confirmamos que o Quarkus tende a seguir ou priorizar o uso de especifica√ß√µes, como JAX-RS, por exemplo*,* o que tende a n√£o ser o normal de quem est√° no universo do Spring.\nCompatibilidade Como dito anteriormente, nossos casos de usos raramente possuem grande complexidade e foi limitado a an√°lise nos cen√°rios mais comuns, ou seja, disponibiliza√ß√£o e consumo de uma APIs Rest, al√©m de acesso a bases de dados, normalmente MySQL.\nA disponibiliza√ß√£o de endpoints, ambas ferramentas possuem similaridades, com foco no fato do Quarkus utilizar por padr√£o anota√ß√µes JAX-RS, enquanto o Micronaut, apesar de possuir suporte a elas, utilizar anota√ß√µes pr√≥prias, por√©m estas s√£o bem intuitivas. Um ponto importante, e muito negligenciado quando falamos de APIs, seria sua documenta√ß√£o e neste assunto, ambos possuem suporte nativo para OpenAPI, permitindo que seja gerado uma documenta√ß√£o com base na declara√ß√£o de endpoints existentes no c√≥digo (code first).\nAssim como √© simples para disponibilizar um endpoint, criar um cliente HTTP tamb√©m √© semelhante em ambos frameworks, no qual o cliente √© constru√≠do apenas com a cria√ß√£o de uma interface anotada, explicitando em seus m√©todos, o verbo, o caminho, seus par√¢metros, seus cabe√ßalhos e o corpo da requisi√ß√£o, muito semelhante aos j√° conhecidos Feign e Retrofit.\nUm ponto que pode ser considerado interessante no Micronaut √© em rela√ß√£o √†s configura√ß√µes de (des)serializa√ß√£o, onde estas podem ser definidas no arquivo de configura√ß√£o, sem necessidade de codifica√ß√£o. Atrav√©s desse arquivo √© poss√≠vel definir desde qual estrat√©gia de nomes utilizar (camel case, snake case, etc), at√© como os dados devem ser convertidos enquanto no Quarkus, isso somente pode ser realizado atrav√©s de codifica√ß√£o, o que eleva a quantidade de c√≥digo produzido/contido no projeto.\nO acesso a bases de dados √© similar, com ambos possuindo suporte ao Hibernate e a suporte nativo a diversas bases. A quest√£o est√° na forma como ser√£o declaradas as consultas que ser√£o realizadas, com o Micronaut suportando declara√ß√µes por interfaces e m√©todos descritivos, enquanto o Quarkus, at√© onde consegui identificar realiza de uma maneira mais declarativa e, consequentemente, verbosa.\nNesse projeto em quest√£o, precis√°vamos realizar uma esp√©cie de versionamento de todas as entidades que fossem alteradas na base de dados, por√©m, o hist√≥rico √© armazenado em um servi√ßo externo a aplica√ß√£o. A maneira mais simples de se realizar essa integra√ß√£o seria atrav√©s de um interceptor no Hibernate. Com o Micronaut, essa integra√ß√£o √© extremamente simples, bastando disponibilizar no contexto um bean deste tipo, que este √© automaticamente utilizado. Em rela√ß√£o ao Quarkus, eu n√£o consegui identificar como seria realizado essa integra√ß√£o e tampouco consegui encontrar, seja na internet, seja em sua documenta√ß√£o oficial.\nDocumenta√ß√£o Considero este um dos t√≥picos mais importantes a ser analisado, pois, a documenta√ß√£o √© e deve ser sempre utilizada como refer√™ncia para analisar ou construir eventuais casos de usos, ou apenas para entendimento das funcionalidades disponibilizadas por uma ferramenta.\nNeste ponto, acredito que o Quarkus deixa muito a desejar, pois, sua documenta√ß√£o √© baseada em guias pr√°ticos e, particularmente, considero isso muito ruim para um projeto de longa dura√ß√£o, mas s√£o excelentes para quem gostaria de realizar testes de alguma integra√ß√£o ou funcionalidade. Ou seja, no decorrer do desenvolvimento de um projeto, a tend√™ncia √© que as pesquisas relacionadas a tecnologia deixem de ser o \u0026ldquo;como fazer algo\u0026rdquo; para os \u0026ldquo;porqu√™s de algo acontecer\u0026rdquo;. Com a separa√ß√£o por guias, essa pesquisa se torna dif√≠cil e cansativa, o que faria com que as pessoas buscassem outros meios, como Stack Overflow, por exemplo. Como exemplo, posso mencionar a necessidade citada acima, de criar um Interceptor, e eu n√£o consegui encontrar nos guias exemplos de utiliza√ß√£o e mesmo em mecanismos de pesquisa, n√£o consegui encontrar nada relacionado a isso.\nPor outro lado, com o Micronaut, sua documenta√ß√£o √© bem mais detalhada e completa, acredito que falte muito para chegar no n√≠vel de conte√∫do que a documenta√ß√£o do Spring possui, mas nela √© poss√≠vel encontrar praticamente tudo relacionado a um t√≥pico de forma centralizada ou em documenta√ß√µes espec√≠ficas de uma extens√£o, reduzindo em muito a necessidade de abrir e ler diversos guias de um mesmo assunto para encontrar algo espec√≠fico.\nConclus√£o Ambos frameworks possuem suporte e compatibilidade com os cen√°rios que analisamos e poderiam ser adotados de forma tranquila em qualquer um de nossos projetos. Por√©m, a curva de aprendizado do Micronaut demonstrou ser bem mais tranquila, com bastante similaridades com o j√° utilizado Spring como, por exemplo, suporte ao acesso a bases de dados atrav√©s da declara√ß√£o de interfaces e m√©todos descritivos.\nPor√©m, o fator que acredito que teve um maior peso na decis√£o foi a documenta√ß√£o, que apesar de acreditar que ainda possa ser evolu√≠da, no Micronaut √© muito mais completo e de f√°cil localiza√ß√£o do que a encontrada com os guias disponibilizados pelo Quarkus.\nCom tudo dito, se fosse para sair do universo Spring, seja para ado√ß√£o ou n√£o do GraalVM, hoje escolheria Micronaut, sem grandes receios nessa decis√£o.\nAgrade√ßo a leitura e sinta-se a vontade de realizar qualquer questionamento sobre o assunto.\n","ref":"/pt/posts/2021-03/pensando-em-graalvm-devo-escolher-quarkus-ou-micronaut/"},{"title":"Criando maquinas virtuais (VM's) utilizando QEMU","date":"","description":"","body":"Recentemente precisei realizar alguns testes simples de uma aplica√ß√£o que somente funcionavam no Windows e como n√£o possuo esse ambiente, decidi criar uma VM com Windows 10. Minha primeira ideia foi utilizar o VirtualBox, por√©m por algum motivo, n√£o conseguia de forma alguma inicializar o instalador, sempre gerando um erro aleat√≥rio ou ent√£o a tela ficava estilo o chiado de uma TV, por√©m colorido e sem som.\nEsse problema, impedia que eu prosseguisse com a instala√ß√£o e quase me fez desistir do teste que iria realizar, por√©m, resolvi testar criar uma VM utilizando o QEMU.\nApesar de existirem interfaces (GUI) para realizar configura√ß√µes de VM\u0026rsquo;s para o QEMU, n√£o encontrei no Homebrew nenhuma das alternativas que conhe√ßo (aqemu, virt-manager) e para realizar meu teste, decidi fazer o procedimento de forma manual.\nO que √© QEMU Pode se dizer que o QEMU √© um aplicativo de c√≥digo aberto, multiplataforma, que serve para emular m√°quinas (VM) e virtualizar instru√ß√µes de outras plataformas, como, por exemplo, emular instru√ß√µes ARM e PowerPC em ambientes x86.\nInstalando o QEMU A instala√ß√£o pode ser feita de diversas formas, e todas elas podem ser encontradas aqui. Neste texto, irei descrever como √© feito a instala√ß√£o no macOS utilizando-se do Homebrew e sistemas Linux que s√£o baseados em Debian/Ubuntu.\n# macOS brew install qemu # Debian/Ubuntu apt-get install qemu Criando um disco para instala√ß√£o do sistema operacional Utilizamos para tal o comando qemu-img como, por exemplo:\nqemu-img create -f qcow2 windows10.qcow2 30G No comando acima, estamos criando um arquivo, chamado windows10.qcow2 com 30G. Esse arquivos ser√° utilizado para instalarmos o Windows 10.\nInstalando o sistema operacional no disco criado Neste ponto, devemos nos atentar ao sistema que ser√° virtualizado, sendo necess√°rio executar o comando de acordo. Por exemplo, se a instala√ß√£o for do Windows 10 64 bits, o comando dever√° ser o qemu-system-x86_64, para o caso do ambiente ser baseado em ARM, o comando seria: qemu-system-arm.\nPara meu cen√°rio, instalarei o Windows 10 64 bits, logo o comando que irei executar ser√° o seguinte:\nqemu-system-x86_64 -hda windows10.qcow2 -m 4G -cdrom ~/Downloads/tibia/Win10_2004_EnglishInternational_x64.iso -boot c No comando acima, o QEMU ir√° simular um ambiente 64 bits, com 4G de mem√≥ria RAM, utilizando o arquivo criado anteriormente como disco e o arquivo ISO, baixado do site da Microsoft, que contem a imagem de instala√ß√£o, ser√° apresentado ao sistema como se fosse um CD.\nIniciando o sistema instalado Ap√≥s todo o procedimento, caso voc√™ n√£o encerre o QEMU, voc√™ ir√° acessar normalmente sua m√°quina virtual, por√©m, ap√≥s encerrado, caso deseje acessar outra vez, basta executar o seguinte comando:\nqemu-system-x86_64 -m 4G -hda windows10.qcow2 Conclus√£o Como visto, relacionado a virtualiza√ß√£o, existe uma alternativa gratuita ao VirtualBox que pode muitas vezes suprir nossas necessidades de cria√ß√£o e execu√ß√£o de m√°quinas virtuais. Apesar de uma complexidade maior, conhecer o QEMU pode ser √∫til para situa√ß√µes na qual n√£o temos uma solu√ß√£o mais amig√°vel para criarmos nossas VMs.\nPara saber mais sobre o QEMU, recomendo olhar o Wiki oficial: https://wiki.qemu.org/Main_Page\n","ref":"/pt/posts/2020-09/criando-maquinas-virtuais-utilizando-qemu/"},{"title":"Uma lista de projetos brasileiros","date":"","description":"","body":"Todo desenvolvedor, ao menos uma vez, j√° deve ter se deparado com as chamadas awesome lists. Essas listas tentam juntar em um local projetos relacionados a um tema ou bibliotecas aos quais foram desenvolvidas.\nAlguns exemplos destas listas s√£o:\nawesome-java awesome-python vertx-awesome awesome-javascript awesome-go Existem diversas outras listas deste tipo, basta buscar no GitHub e provavelmente voc√™ ir√° encontrar alguma relacionada ao t√≥pico que deseja. Veja aqui diversas listas.\nEssas listas s√£o bem uteis e servem de base para encontrarmos solu√ß√µes e ferramentas para resolver poss√≠veis problemas que estamos enfrentando ou simplesmente facilitar alguma de nossas atividades di√°rias.\nClaudison, o Filho da Nuvem me apresentou o reposit√≥rio do Felipe Fialho com o prop√≥sito de agrupar projetos brasileiros.\nVeja a lista: awesome-made-by-brazilians Fica aqui meu convite, se conhecer projetos brasileiros e acredita que eles mere√ßam destaque, sinta-se a vontade em abrir seu PR no reposit√≥rio do Felipe, acredito que ele n√£o se incomodar√° com isso!\nEdit: Eu havia criado um reposit√≥rio para esse fim, mas n√£o existem motivos para termos duas listas com o mesmo fim! Vamos colaborar com a que j√° existe!\n","ref":"/pt/posts/2020-08/uma-lista-de-projetos-brasileiros/"},{"title":"Transa√ß√µes ACID","date":"","description":"","body":"Transa√ß√µes ACID Acr√¥nimo de Atomicidade, Consist√™ncia, Isolamento e Durabilidade √© um conjunto de propriedades de uma transa√ß√£o de bancos de dados que visam garantir a integridade e validade de dados, mesmo ap√≥s falhas sist√™micas ou at√© falhas de energia el√©trica.\nAtomicidade Trata como unidade, todas as opera√ß√µes realizadas para uma tarefa, ou seja, todas as instru√ß√µes ser√£o efetivadas com sucesso ou ent√£o, nenhuma delas dever√° ser efetivada. Por exemplo, em uma transfer√™ncia banc√°ria, em caso de falha em qualquer uma das etapas, todo o processo deve ser desfeito e os valores retornados ao original.\nConsist√™ncia Considera-se que os dados s√£o consistentes e, devem ser mantidos desta forma mesmo ap√≥s outras transa√ß√µes. Ou seja, em um processo de transfer√™ncia banc√°ria, caso ocorra falha na etapa de dep√≥sito, os dados devem retornar ao seu estado inicial, com o valor devolvido na conta origem. O estado da base s√≥ deve ser alterado, caso todas as opera√ß√µes concluam com sucesso.\nIsolamento Determina quando e como os valores alterados por uma transa√ß√£o estar√£o dispon√≠veis para as demais transa√ß√µes. Por exemplo, em um caso onde um valor est√° sendo alterado e consultado simultaneamente, o sistema deve garantir que o valor retornado seja exatamente o resultado da transa√ß√£o de altera√ß√£o, n√£o retornando um dado diferente do real. Isso garante que, em caso de falha na opera√ß√£o de escrita, o valor retornado para a consulta seja o valor original e n√£o o que supostamente seria ap√≥s conclus√£o da opera√ß√£o de escrita.\nDurabilidade Garante que um dado, ao ser persistido, estar√° dispon√≠vel mesmo ap√≥s alguma falha, como, por exemplo, erro fatal na aplica√ß√£o ou mesmo falta de energia el√©trica. Ou seja, o armazenamento destes valores seja feito de forma efetiva, garantindo sua disponibilidade ap√≥s reestabelecimento dos servi√ßos.\nConclus√£o Basicamente, ACID visa garantir que as transa√ß√µes realizadas em um sistema, sejam sempre realizados de forma √≠ntegra, garantindo a disponibilidade dos dados mesmo ap√≥s falhas criticas, como falta de energia el√©trica. Visa tamb√©m garantir que em um sistema de alta concorr√™ncia, os valores consultados sejam sempre condizentes com os valores persistidos na base, evitando as chamadas leituras sujas, onde um dado √© retornado com um valor pr√©-efetiva√ß√£o de uma escrita, que pode ou n√£o ocorrer com sucesso.\n","ref":"/pt/posts/2020-08/acid-transactions/"},{"title":"Seus dotfiles sob controle","date":"","description":"","body":"Muitos desenvolvedores ao longo de sua carreira acaba criando diversos scripts, aliases e customiza√ß√µes em seus ambientes de desenvolvimento. Essas configura√ß√µes, normalmente ficam em arquivos e, quando este usu√°rio muda seu ambiente, por vezes, faz uma c√≥pia desses arquivos para o novo ambiente. Esse processo tende a ser feito copiando seus arquivos de um ambiente para outro.\nApesar de funcionar, existe maneira mais pr√°tica para gerenciar esses arquivos, realizando as devidas associa√ß√µes conforme necess√°rios, inclusive suportando perfis diferentes. Ou seja, √© poss√≠vel criar um dotfile com diversos perfis, definindo configura√ß√µes diferentes de acordo com sua necessidade. Um exemplo desta utiliza√ß√£o, seria construir um perfil para seu ambiente pessoal, outro para seu ambiente profissional, alterando chaves de acesso a servidores e configura√ß√µes de assinatura de commits no git.\nO que s√£o dotfiles Em sistemas baseados em Unix, √© comum as configura√ß√µes serem mantidas em arquivos iniciados com ponto (.). Estes arquivos ou pastas, s√£o considerados como ‚Äúocultos‚Äù e normalmente n√£o s√£o listados utilizando-se comandos como ls, exceto quando especificado para que sejam exibidos.\nExemplos de arquivos e pastas inciados com ponto (.):\n.gitignore .m2 .bashrc .zshrc Isso n√£o quer dizer que seus arquivos precisam iniciar com ponto (.) e de fato existem diversas pessoas que n√£o o definem assim, separando em pastas com nomes condizentes, como, por exemplo ‚Äú$HOME/etc‚Äù. Particularmente, prefiro manter tais arquivos dentro de uma pasta iniciando com o ponto (.), especificamente ‚Äú$HOME/.dotifiles.d‚Äù, pois esta pasta n√£o √© listada por padr√£o, logo n√£o ser√° notada na maioria das vezes, o que gera em mim uma sensa√ß√£o de organiza√ß√£o.\nUm gerenciador para dotfiles Como dito anteriormente, existem diversas maneiras para gerenciar seus dotfiles, seja ele de forma manual ou automatizada com aux√≠lio de aplicativos. Utilizar um controlador de vers√µes, como o git √© uma forma interessante fazer, por√©m, ainda precisaremos realizar os v√≠nculos de forma manual em cada ambiente instalado.\nApesar de ser poss√≠vel versionar seu $HOME, ao fazer isso, por padr√£o, sua lista de arquivos ignorados ficaria extremamente extensa, al√©m do risco de adicionarmos arquivos indevidos em nosso reposit√≥rio. Utilizando-se da versalidade que o git nos oferece, mas sem a dificuldade de termos que adicionar diversos arquivos e diret√≥rios em nosso gitignore, o yadm (Yet Another Dotfiles Manager) nos auxilia na tarefa de gerenciar nossas configura√ß√µes, com diversos recursos interessantes adicionais.\nComo uma esp√©cie de ‚Äúcasca‚Äù do Git, com o yadm voc√™ poder√° versionar de forma simplificada seu $HOME, com a capacidade de adicionar criptografia em arquivos sens√≠veis, como chave de acesso, utilizar arquivos alternativos conforme o ambiente ao qual seus dotfiles est√£o sendo utilizados, al√©m de claro, saber exatamente o que foi alterado antes de atualizar seu reposit√≥rio de configura√ß√µes.\nInstalando o yadm Existem diversas formas de realizar a instala√ß√£o do yadm, seja ela utilizando gerenciadores de pacotes como o Homebrew e apt-get at√© baixar o arquivo em uma pasta em seu dispositivo. Todas essas formas, podem ser encontradas na documenta√ß√£o oficial aqui.\nCada sistema operacional oferece uma forma de instalar, que acaba por facilitar o processo de atualiza√ß√£o do yadm e abaixo segue forma de instala√ß√£o com maior compatibilidade, ou seja, independente de seu sistema operacional ser macOS, Ubuntu, Arch Linux ou FreeBSD.\n$ curl -fLo /usr/local/bin/yadm https://github.com/TheLocehiliosan/yadm/raw/master/yadm \u0026amp;\u0026amp; chmod a+x /usr/local/bin/yadm O yadm tem como requisito que o Git esteja instalado em seu sistema e ao tentar executar sem essa depend√™ncia, a seguinte mensagem de erro ser√° apresentada:\n$ yadm version /usr/local/bin/yadm: line 909: git: command not found ERROR: This functionality requires Git to be installed, but the command \u0026#39;git\u0026#39; cannot be located Com o Git instalado a mensagem deve ser a seguinte:\n$ yadm version yadm 2.5.0 Adicionando seus primeiros arquivos Os comandos utilizados para inciar um reposit√≥rio, adicionar arquivos, realizar commit bem como enviar e baixar atualiza√ß√µes de um reposit√≥rio, s√£o os mesmos dispon√≠veis no Git, apenas iniciados com yadm.\nPara iniciar seu primeiro reposit√≥rio, o seguinte comando deve ser executado:\n$ yadm init Initialized empty shared Git repository in /home/rapatao/.config/yadm/repo.git/ Ap√≥s inicializado, voc√™ pode adicionar todos os arquivos que considera importantes e devem ser versionados, isso normalmente inclui arquivos como, por exemplo: .bashrch e .zshrc\nPara adicionar arquivos, basta executar o comando abaixo, onde deve ser substitu√≠do pelo arquivo que deseja versionar.\n$ yadm add \u0026lt;file\u0026gt; Adicionado os arquivos, √© hora de realizar seu primeiro commit e para isso, basta executar o comando a seguir:\n$ yadm commit -m \u0026#34;primeiro commit\u0026#34; [master (root-commit) 506b780] primeiro commit 1 file changed, 117 insertions(+) create mode 100644 .bashrc Caso seu Git n√£o esteja corretamente configurado, a mensagem abaixo ser√° apresentada, informando que seu e-mail e nome n√£o foram configurados, impedindo que seu commit seja realizado. Para solucionar, basta executar o comando conforme orientado na mensagem e repetir o procedimento, conseguindo assim realizar seu commit.\n$ yadm commit -m \u0026#34;primeiro commit\u0026#34; *** Please tell me who you are. Run git config --global user.email \u0026#34;you@example.com\u0026#34; git config --global user.name \u0026#34;Your Name\u0026#34; to set your account\u0026#39;s default identity. Omit --global to set the identity only in this repository. fatal: unable to auto-detect email address (got \u0026#39;rapatao@89122a756847.(none)\u0026#39;) Suas configura√ß√µes em um reposit√≥rio remoto Uma das vantagens do Git √© que voc√™ pode ter um reposit√≥rio local e uma c√≥pia deste reposit√≥rio remotamente. Isso √© extremamente √∫til para garantir que seus arquivos possam ser acessados praticamente de qualquer lugar.\nPara enviar seus arquivos para um reposit√≥rio remoto, voc√™ pode utilizar servi√ßos dispon√≠veis na Internet, como GitHub, BitBucket ou GitLab. O procedimento √© similar ao realizado com o comando Git, sendo necess√°rio apenas que um reposit√≥rio remoto exista. Exemplo:\n$ yadm remote add origin \u0026lt;url\u0026gt; $ yadm push -u origin master Suas configura√ß√µes em um novo ambiente Com o advento do reposit√≥rio descentralizado, para instalar seus arquivos em um novo ambiente, basta executar o seguinte comando:\n$ yadm clone \u0026lt;url\u0026gt; O comando ir√° realizar o clone do reposit√≥rio localmente e os arquivos versionados, ser√£o copiados para os devidos locais, ou seja, tudo que voc√™ configurou ser√° automaticamente replicado para esse novo ambiente e tudo que voc√™ precisou fazer, foi instalar o yadm.\n√â importante ressaltar, que ao realizar o clone, o yadm, ir√° tentar realizar um merge com os arquivos pr√©-existentes no novo ambiente, podendo causar conflitos ou mesmo falhando no processo. Normalmente esses arquivos ser√£o, de fato, substitu√≠dos pelo conte√∫do que voc√™ versionou anteriormente, logo a maneira mais simples para resolver tal problema √© excluindo tais arquivos existentes localmente antes de realizar o clone.\nSistemas diferentes com arquivos diferentes Uma das grandes vantagens do yadm √© a possibilidade de ter arquivos com diferentes configura√ß√µes e estes serem utilizados conforme regra pre-definida. Por exemplo, √© poss√≠vel criar arquivos de configura√ß√£o do Git e conforme ambiente, um destes arquivos ser√° utilizado.\nVamos supor que voc√™ utilize em sua casa um macOS e em sua empresa um Linux. Quando estiver em sua casa, voc√™ gostaria de ter seus commits assinados com o e-mail ‚Äúluiz@example.com‚Äù e quando estiver na empresa com ‚Äúluiz.empresa@example.com‚Äù.\nPara isso, basta criar os arquivos com as devidas diferen√ßas e salva-los utilizando o seguinte padr√£o:\n\u0026lt;arquivo\u0026gt;##\u0026lt;condi√ß√£o\u0026gt;[,\u0026lt;condi√ß√£o\u0026gt;,...] A lista completa de condi√ß√µes pode ser encontrada aqui.\nNo cen√°rio reportado acima, teremos os seguintes arquivos:\n$ ls -a .gitconfig* .gitconfig##os.Darwin .gitconfig##os.Linux Agora basta gerenciarmos esses arquivos com o yadm e pronto, um link simb√≥lico ser√° criado apontado para o arquivo ao qual a condi√ß√£o for verdadeira.\n$ yadm add .gitconfig* $ ls -la .gitconfig* lrwxrwxrwx 1 rapatao rapatao 20 Aug 15 17:25 .gitconfig -\u0026gt; .gitconfig##os.Linux -rw-rw-r-- 1 rapatao rapatao 57 Aug 15 17:18 .gitconfig##os.Darwin -rw-rw-r-- 1 rapatao rapatao 57 Aug 15 17:18 .gitconfig##os.Linux Como podemos notar, ao adicionarmos o arquivo o yadm criou automaticamente um link simb√≥lico apontando de \u0026ldquo;.gitconfig\u0026rdquo; para \u0026ldquo;.gitconfig##os.Linux\u0026rdquo;.\nConclus√£o Como podemos ver at√© aqui, a utiliza√ß√£o do yadm pode auxiliar a controlar nossas configura√ß√µes, unindo todo o potencial que o Git nos oferece, como controle de mudan√ßas e distribui√ß√£o de conte√∫do, bem como diversos outros recursos, como o exemplo acima, onde ‚Äúcustomizamos‚Äù nossas configura√ß√µes com base no sistema operacional que estamos executando.\nAl√©m dos recursos citados acima, existem outros e apesar de n√£o os descrever neste texto, acredito que possa ser interessante para quase todos os usu√°rios:\nEncryption: Criptografa conte√∫do sens√≠vel. √ötil para versionar chaves SSH, uma vez que para decodificar, ser√° necess√°rio o fornecimento de uma senha definida pelo usu√°rio. Bootstrap: Um script que pode ser executado ao clonar um reposit√≥rio. √ötil para instalar aplicativos normalmente utilizados e/ou necess√°rios para correto funcionamento de seu ambiente. Acredito ter falado sobre os principais t√≥picos sobre dotfiles e como gerencia-los utilizando o yadm. Para maiores detalhes, recomendo olhar o site oficial yadm.io, mas fique a vontade em me perguntar diretamente algo sobre o assunto.\n","ref":"/pt/posts/2020-08/your-dotfiles-under-control/"},{"title":"Programa√ß√£o reativa com Spring WebFlux, devo utilizar?","date":"","description":"","body":"Devo utilizar?\nN√£o, mas pode ser que sim! Eu poderia parar o artigo aqui, mas isso n√£o iria agregar em nada e voc√™ jamais iria entender o motivo de eu come√ßar o texto com um n√£o, mas pode ser que sim. A verdade √© que se voc√™ espera utilizar WebFlux e resolver todos os seus problemas, sinto lhe dizer que seus problemas podem estar s√≥ come√ßando.\nRecentemente o assunto Vantagens e Desvantagens sobre o WebFlux surgiu em meu trabalho e por ter pouca experi√™ncia utilizando WebFlux, resolvi buscar mais informa√ß√µes sobre o assunto e pretendo descrever aqui minha opini√£o sobre a utiliza√ß√£o de WebFlux e por consequ√™ncia, um pouco sobre programa√ß√£o reativa.\nTem alguns anos que programa√ß√£o reativa est√° em alta e fala-se muito sobre ganhos de performance, otimiza√ß√£o de recursos, mas a discuss√£o sobre o assunto ainda est√° muito rasa e por vezes com ar de puro modismo.\nQuando se pesquisa sobre a performance de aplica√ß√µes reativas, acabamos vendo gr√°ficos maravilhosos, como se todos os problemas fossem resolvidos com uma simples migra√ß√£o de paradigma, mas muitas vezes n√£o notamos que as compara√ß√µes acabam sendo um tanto quanto estranhas quando comparadas com aplica√ß√µes \u0026ldquo;reais\u0026rdquo;.\nMe refiro ao fato destes testes considerarem uma migra√ß√£o completa da arquitetura da aplica√ß√£o, ou seja, do c√≥digo ao banco de dados, e isso normalmente n√£o √© uma op√ß√£o, pois nem sempre podemos substituir nosso banco de dados, por exemplo, do MySQL para MongoDB ou Cassandra. Isso, para mim, faz com que os resultados destes comparativos sejam vistos com uma certa pondera√ß√£o.\nPor√©m, antes de realizarmos qualquer mudan√ßa no c√≥digo, devemos sempre responder alguns questionamentos que considero fundamentais para o sucesso de tarefas deste n√≠vel.\nO time tem conhecimento sobre a tecnologia que ser√° utilizada? Caso negativo, o time ter√° tempo h√°bil para aprender a nova tecnologia? O time entende as vantagens, desvantagens e riscos desta tecnologia? A nova tecnologia √© compat√≠vel com as outras ferramentas utilizadas? Ex.: Banco de dados. √â sempre importante responder estas quest√µes antes de iniciar um projeto com ado√ß√£o de uma tecnologia diferente da habitual. Isso ajuda a prevenir riscos inesperados e poss√≠veis atrasos nas entregas.\nN√≥s desenvolvedores temos muitas vezes o desejo de utilizar algo novo/diferente em nossas tarefas do dia a dia, por√©m √© sempre importante ponderarmos o que isso ir√° agregar, com dificuldade, curva de aprendizado e riscos inerentes a essa ades√£o.\nVoltando ao assunto principal, Spring WebFlux\u0026hellip;\nDentre tudo que li e tive oportunidade de ver na pr√°tica, achei bem interessante a efici√™ncia das aplica√ß√µes constru√≠das com WebFlux. Foi o famoso ‚Äúmuito com pouco‚Äù, por√©m me chamou aten√ß√£o a complexidade em se construir testes unit√°rios/integrados bem como a dificuldade na realiza√ß√£o de debug, visto que o fluxo de chamadas n√£o √© mais, por assim dizer, sequencial.\nEntre os diversos artigos que li, havia diversos relatos de pessoas que afirmavam categoricamente que o WebFlux era melhor pois era poss√≠vel realizar processamento das requisi√ß√µes em paralelo, enquanto no modelo utilizado pelo Spring MVC, somente uma requisi√ß√£o era realizada por vez, o que n√£o √© verdadeiro, visto que o paralelismo √© criado com threads e controlado pelos servidores de aplica√ß√£o, como por exemplo, Tomcat e Jetty.\nEnfim, devo utilizar WebFlux em meu projeto?\nBom, isso depende‚Ä¶\nO fato da aplica√ß√£o ser constru√≠da utilizando um paradigma reativo (WebFlux) n√£o faz com que ela tenha uma performance superior ao modelo imperativo (Spring MVC). Muitas vezes o problema na performance pode estar simplesmente na maneira como as coisas foram implementadas ou at√© mesmo por consumo de servi√ßos que bloqueiam por tempo demais uma transa√ß√£o. Existem outros cen√°rios que poderiam melhorar a performance de uma aplica√ß√£o sem antes considerar uma migra√ß√£o de tecnologia, como por exemplo, parametriza√ß√£o da JVM.\nResumidamente, se hoje uma aplica√ß√£o funcionar bem utilizando Spring MVC, n√£o \u0026ldquo;existem\u0026rdquo; motivos reais para que seja realizado uma migra√ß√£o para WebFlux, al√©m do fato que, dependendo do problema, pode existir outra formas de resolve-lo, sem antes considerar uma migra√ß√£o de tecnologia.\nPor√©m, se a aplica√ß√£o estiver com problemas relacionado a quantidade de threads, ou fizer uso de streaming de dados ou mesmo ter como prioridade um uso eficiente de recursos de hardware, talvez a utiliza√ß√£o de WebFlux seja uma sa√≠da.\nEnfim, n√£o existe uma formula m√°gica que ir√° dizer se devemos ou n√£o utilizar WebFlux ou MVC em nossos projetos. Sempre ser√° necess√°rio analisarmos o cen√°rio que temos e comparar com as op√ß√µes que temos dispon√≠veis, mas √© sempre importante entendermos as vantagens e desvantagens destas e outras tecnologias.\nPode ser que que uma migra√ß√£o n√£o seja necess√°ria agora, mas no futuro ela pode vir a ser e √© sempre bom estarmos preparados.\n","ref":"/pt/posts/2020-07/should-i-use-spring-webflux/"},{"title":"Como √© trabalhar com TI?","date":"","description":"","body":"Recentemente tive contato com uma pessoa que est√° iniciando na √°rea, solicitando alguns tipos de orienta√ß√µes a seguir para se tornar um bom profissional.\nEm momento algum este fez o questionamento sobre como √© trabalhar na √°rea, mas passando alguns t√≥picos para estudo, acabei lembrando de questionamentos que ouvia de pessoas fora da √°rea e tinham curiosidade de como era trabalhar com TI.\nTalvez este questionamento era mais comum quando percebemos que na √©poca, computadores n√£o eram comuns, tampouco celulares (n√£o me refiro aos smartphones) eram populares, na verdade, eram extremamente caros e com √°rea de cobertura muito baixa, mas isso j√° √© um pouco fora do contexto.\nO mais interessante disso √© que naquela √©poca o trabalho com TI n√£o era muito diferente do que √© hoje. Costumo dizer que √© para resolver problemas que n√£o existiam, por√©m para os mais novos, isso n√£o faz muito sentido, pois estes j√° chegaram em uma era onde computadores est√£o por todos os lados.\nA diferen√ßa para mim √© que hoje, tenho um embasamento melhor sobre o que √© trabalhar com TI e quando perguntam sobre isso, eu normalmente respondo:\n\u0026ldquo;Em qual √°rea?\u0026rdquo;\nPois √©, TI √© t√£o abrangente e com tantas √°reas internas que fica at√© complicado generalizar. Para os mais novos ou iniciantes no assunto, eu costumo dizer que existem alguns seguimentos b√°sicos dentro de TI, sendo eles grosseiramente os seguintes:\nDesenvolvimento Infraestrutura Por√©m, √© extremamente errado dizer que existem apenas estas duas √°reas, mas prefiro dizer que estes s√£o os pilares de todas as outras, pois no meu ponto de vista, √°reas como seguran√ßa da informa√ß√£o, suporte t√©cnico, programa√ß√£o, qualidade de software, bancos de dados e cloud computing, s√£o oriundos de um, quando n√£o de ambos os t√≥picos acima.\nEnt√£o, como √© trabalhar com TI?\nN√£o utilizando minha resposta padr√£o, mas tentando generalizar todas as √°reas que citei acima e possivelmente outras n√£o mencionadas, trabalhar com TI √© ter que pesquisar e estudar o tempo todo, seja para solucionar problemas que est√£o ocorrendo na aplica√ß√£o, estes que podem ser relacionados ao c√≥digo/infraestrutura ou ent√£o para adquirir conhecimento sobre as atuais ou novas tecnologias.\nA grande quest√£o da TI √© que sua evolu√ß√£o √© muito r√°pida e constante, seja em componentes f√≠sicos, ferramentas, linguagens, maneiras de se codificar, mas no geral, tudo √© voltado para melhorar o desempenho ou manutenibilidade das solu√ß√µes.\nPor ser uma √°rea que evolui constantemente, normalmente buscamos nos especializar em algum segmento, tendo outros como secund√°rios, mas normalmente, somos for√ßados a, temos que aprender assuntos dos quais n√£o temos vontade ou mesmo n√£o gostamos, mas s√£o necess√°rios para melhor execu√ß√£o de nossos trabalhos. Como por exemplo, podemos citar um programador backend aprendendo sobre frontend. Neste caso, o conhecimento m√≠nimo de um sobre o outro √© importante, por√©m normalmente um bom profissional de um segmento n√£o √© muito adepto ao outro e isso √© completamente normal.\nA gra√ßa da TI est√° justamente no fato de que, mesmo tentando ser generalistas, acabamos especializados em determinados assuntos e isso faz com que trabalhemos com diversas outras pessoas em um mesmo projeto, mesclando conhecimentos e formas diferentes para resolu√ß√£o de um mesmo assunto.\nEnfim, escrevi tanto para dizer que:\nTrabalhar com TI √© estar disposto a dizer e ouvir opni√µes diferentes sobre um mesmo assunto e, buscar convergir estas opni√µes para uma nova ainda melhor e possivelmente diferente das originais. Trabalhar com TI √© entender que sozinho as coisas s√£o mais dificeis do que precisam ser, √© entender que trabalho em equipe √© sempre mais prazero e produtivo. Trabalhar com TI √© se adaptar as mudan√ßas, aprendendo e ensinando constantemente. Este texto √© basicamente minha vis√£o sobre como √© trabalhar com TI, voc√™ pode n√£o concordar, e devemos sempre estar abertos a ouvir diferentes pontos de vistas, por isso, sinta-se a vontade de expor o seu e quem sabe n√£o temos uma excelente conversa sobre o assunto.\n","ref":"/pt/posts/2020-05/what-is-it-like-working-in-the-it-area/"},{"title":"Verifica√ß√£o de varargs utilizando Mockito","date":"","description":"","body":"Construir testes √© uma das tarefas mais rotineiras de um desenvolvedor e normalmente, com frameworks como jUnit e Mockito, esta tarefa tende a ser realizada sem grandes dificuldades. Apesar disso, existem certas valida√ß√µes, que costumam ter maior complexidade, como exemplo, verifica√ß√£o de chamadas a m√©todos com par√¢metros to tipo varargs.\nCaso n√£o saiba o que √© varargs, pode-se dizer grosseiramente que √©, o \u0026ldquo;\u0026hellip;\u0026rdquo; utilizado nas declara√ß√µes de par√¢metros em m√©todos, por√©m, recomendo ler este artigo para melhor entendimento e visualiza√ß√£o de exemplos.\nApesar de n√£o ter alta complexidade, nem sempre temos controle sobre como as implementa√ß√µes ser√£o invocadas, principalmente quando utilizamos frameworks que fazem utiliza√ß√£o de conceitos como callbacks ou mesmo reflection, muito utilizado no framework Spring.\nConsidere a seguinte declara√ß√£o de classe:\nclass Varargs { public void consume(String... values) { System.out.println(String.join(\u0026#34;, \u0026#34;, values)); } } Devemos considerar que a classe Varargs ser√° invocada por algum framework do qual n√£o possu√≠mos controle, por√©m, precisamos garantir que, conhecendo o valor de entrada, os valores a serem recebidos na implementa√ß√£o, tamb√©m ser√£o conhecidos.\nPara tentar exemplificar um cen√°rio, podemos considerar que o framework ir√° converter valores da resposta do consumo de uma API REST, realizar c√°lculos e consumir a implementa√ß√£o com o resultado dessa opera√ß√£o.\nApesar de n√£o podermos controlar as opera√ß√µes realizadas por esse framework, podemos manipular a execu√ß√£o, enviando valores conhecidos e validando se o consumo da implementa√ß√£o ser√° feito como esperado.\nEste tipo de teste √© muito √∫til para garantir que atualiza√ß√µes deste framework, n√£o comprometa o comportamento de nossa aplica√ß√£o, possibilitando atualiza√ß√µes constantes e seguras.\nImaginando que o framework em utiliza√ß√£o possua uma classe da qual n√£o temos como controlar, exemplificado abaixo pela classe Invoker com modificador final, devemos garantir que ap√≥s a opera√ß√£o, ao ser invocado o m√©todo da classe Varargs, os mesmo argumentos sejam sempre recebidos, baseando-se nos par√¢metros de entrada.\nfinal class Invoker { private final Varargs varargs; public Invoker(Varargs varargs) { this.varargs = varargs; } public void invoke(String... values) { final var newValue = new ArrayList\u0026lt;\u0026gt;(Arrays.asList(values)); newValue.add(0, String.valueOf(values.length)); varargs.consume(newValue.toArray(new String[0])); } } Considerando tudo que foi dito acima, segue alguns exemplos de utiliza√ß√£o da nossa implementa√ß√£o pela classe Invoker:\nfinal var varargs = new Varargs(); final var invoker = new Invoker(varargs); invoker.invoke(); // 0 invoker.invoke(\u0026#34;1\u0026#34;); // 1, 1 invoker.invoke(\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;); // 2, 1, 2 Dada a contextualiza√ß√£o, segue implementa√ß√£o de teste para valida√ß√£o do cen√°rio:\n@Test public void testNoArgument() { final var varargs = Mockito.spy(new Varargs()); new Invoker(varargs).invoke(); final var stringArgumentCaptor = ArgumentCaptor.forClass(String.class); verify(varargs).consume(stringArgumentCaptor.capture()); assertThat(stringArgumentCaptor.getAllValues(), hasSize(1)); assertThat(stringArgumentCaptor.getAllValues(), containsInRelativeOrder(\u0026#34;0\u0026#34;)); } @Test public void testSingleArgument() { final var varargs = Mockito.spy(new Varargs()); new Invoker(varargs).invoke(\u0026#34;1\u0026#34;); final var stringArgumentCaptor = ArgumentCaptor.forClass(String.class); verify(varargs).consume(stringArgumentCaptor.capture()); assertThat(stringArgumentCaptor.getAllValues(), hasSize(2)); assertThat(stringArgumentCaptor.getAllValues(), containsInRelativeOrder(\u0026#34;1\u0026#34;, \u0026#34;1\u0026#34;)); } @Test public void testTwoArguments() { final var varargs = Mockito.spy(new Varargs()); new Invoker(varargs).invoke(\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;); final var stringArgumentCaptor = ArgumentCaptor.forClass(String.class); verify(varargs).consume(stringArgumentCaptor.capture()); assertThat(stringArgumentCaptor.getAllValues(), hasSize(3)); assertThat(stringArgumentCaptor.getAllValues(), containsInRelativeOrder(\u0026#34;2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;)); } Assim conseguimos garantir que, quando o Invoker receber determinados par√¢metros de entrada, o Varargs ir√° sempre ser consumida com os mesmos valores.\nApesar de o exemplo aqui n√£o ser de um cen√°rio real, acredito que ele possa ser facilmente adaptado para v√°rios casos, servindo assim como refer√™ncia.\nCaso tenha d√∫vidas ou sugest√µes, n√£o hesite em entrar em contato!\n","ref":"/pt/posts/2020-05/verify-varargs-using-mockito/"},{"title":"O que vai aparecer por aqui?","date":"","description":"","body":"J√° tive diversos blogs na vida, de humor, sobre tecnologia e at√© de assuntos gerais, por√©m, todos eles um dia acabaram por serem exclu√≠dos.\nTalvez isso fa√ßa voc√™ pensar no que faria este ser diferente, certo? Sinceramente? Nada! Isso mesmo, nada, por√©m, este foi criado com o intuito de ser um amontoado de informa√ß√µes que podem ser √∫teis para mim mesmo no futuro e n√£o necessariamente atrair publico para as minhas publica√ß√µes.\nIsso pode fazer pensar que n√£o seja bem-vindo aqui, por√©m, √© exatamente o contr√°rio. Pretendo adicionar aqui solu√ß√µes de problemas vividos por mim ou que chegaram ao meu conhecimento. Nestas publica√ß√µes buscarei ao m√°ximo detalhar o problema, conceitos e, quando existem, as solu√ß√µes aplicadas.\nNesse ponto √© que voc√™ se torna extremamente importante, seja na confirma√ß√£o do que descrevi aqui funciona, √© v√°lido ou mesmo propondo alternativas para o que for descrito por mim.\nPor enquanto √© isso e nos vemos em breve!\n","ref":"/pt/posts/2020-05/first-post/"},{"title":"Conhecimentos","date":"","description":"","body":" ","ref":"/pt/experiences/"},{"title":"JSON Formatter & Minifier","date":"","description":"","body":"JSON Formatter \u0026amp; Minifier is a tool to validate, format or minify a string JSON.\nJSON: format minify clear IMPORTANT: This tool does not use any server-side data processing.\n","ref":"/pt/json/"}]