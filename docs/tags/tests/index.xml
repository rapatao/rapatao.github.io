<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tests on rapatao.com</title><link>https://www.rapatao.com/tags/tests/</link><description>Recent content in Tests on rapatao.com</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 28 Aug 2022 12:00:00 -0300</lastBuildDate><atom:link href="https://www.rapatao.com/tags/tests/index.xml" rel="self" type="application/rss+xml"/><item><title>What are Flaky Tests and why fix them!</title><link>https://www.rapatao.com/posts/2022-08/what-are-flaky-tests-and-why-fix-them/</link><pubDate>Sun, 28 Aug 2022 12:00:00 -0300</pubDate><guid>https://www.rapatao.com/posts/2022-08/what-are-flaky-tests-and-why-fix-them/</guid><description>Building tests is surely one of the most difficult and time-consuming tasks for a developer, in addition to usually generating more lines of code than the added functionality. This is due to the various scenarios that need, or should, be verified.
Flaky Tests, are basically test cases created to verify a scenario, however, they can randomly present success and failure results, without having undergone any change, neither in the test case nor in the tested code.</description></item><item><title>Build tests using Kotlin, JUnit and MockK</title><link>https://www.rapatao.com/posts/2022-01/build-tests-using-kotlin-junit-mockk/</link><pubDate>Wed, 19 Jan 2022 22:00:00 -0300</pubDate><guid>https://www.rapatao.com/posts/2022-01/build-tests-using-kotlin-junit-mockk/</guid><description>The main objective of building code tests in an application is to certify what was coded, that is, to guarantee that a given piece of code does what it should do.
JUnit is one of the most used frameworks for building tests in Kotlin and MockK to build mocks, which would be like doubles of an object and have the function of simulating the behavior of a component.
ðŸ’¡ The codes used in this text are available on GitHub: https://github.</description></item><item><title>Optimizing tests in Spring Boot applications</title><link>https://www.rapatao.com/posts/2021-06/optimizing-tests-in-spring-boot-applications/</link><pubDate>Thu, 24 Jun 2021 22:00:00 -0300</pubDate><guid>https://www.rapatao.com/posts/2021-06/optimizing-tests-in-spring-boot-applications/</guid><description>It is extremely common for applications built with Spring Boot to have all their tests annotated with @SpringBootTest, but it is rare to find people who know the functionality of this annotation, when it is necessary to use it and its impact on the execution of an application&amp;rsquo;s tests.
You probably thought that this annotation is for building tests, but do you know what it represents, what happens when it is used?</description></item><item><title>Verify vararg methods using Mockito</title><link>https://www.rapatao.com/posts/2020-05/verify-varargs-using-mockito/</link><pubDate>Thu, 14 May 2020 00:00:00 -0300</pubDate><guid>https://www.rapatao.com/posts/2020-05/verify-varargs-using-mockito/</guid><description>Building tests is one of the most routine tasks for a developer and normally, with frameworks like jUnit and Mockito, this task tends to be carried out without great difficulties. Despite this, there are certain validations, which tend to be more complex, such as checking calls to methods with parameters of type varargs.
If you don&amp;rsquo;t know what varargs is, you can roughly say that it is, the &amp;ldquo;&amp;hellip;&amp;rdquo; used in parameter declarations in methods, however, I recommend reading this article for better understanding and viewing examples.</description></item></channel></rss>